//@ sourceMappingURL=transaction_search.map
// Generated by CoffeeScript 1.6.1
var AdvancedSearch, CreditCard, Transaction, TransactionSearch,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AdvancedSearch = require("./advanced_search").AdvancedSearch;

Transaction = require("./transaction").Transaction;

CreditCard = require("./credit_card").CreditCard;

TransactionSearch = (function(_super) {

  __extends(TransactionSearch, _super);

  function TransactionSearch() {
    return TransactionSearch.__super__.constructor.apply(this, arguments);
  }

  TransactionSearch.textFields("billingCompany", "billingCountryName", "billingExtendedAddress", "billingFirstName", "billingLastName", "billingLocality", "billingPostalCode", "billingRegion", "billingStreetAddress", "creditCardCardholderName", "currency", "customerCompany", "customerEmail", "customerFax", "customerFirstName", "customerId", "customerLastName", "customerPhone", "customerWebsite", "id", "orderId", "paymentMethodToken", "paypalPayerEmail", "paypalPaymentId", "paypalAuthorizationId", "processorAuthorizationCode", "settlementBatchId", "shippingCompany", "shippingCountryName", "shippingExtendedAddress", "shippingFirstName", "shippingLastName", "shippingLocality", "shippingPostalCode", "shippingRegion", "shippingStreetAddress", "creditCardUniqueIdentifier");

  TransactionSearch.equalityFields("creditCardExpirationDate");

  TransactionSearch.partialMatchFields("creditCardNumber");

  TransactionSearch.multipleValueField("createdUsing", {
    "allows": [Transaction.CreatedUsing.FullInformation, Transaction.CreatedUsing.Token]
  });

  TransactionSearch.multipleValueField("creditCardCardType", {
    "allows": CreditCard.CardType.All()
  });

  TransactionSearch.multipleValueField("creditCardCustomerLocation", {
    "allows": [CreditCard.CustomerLocation.International, CreditCard.CustomerLocation.US]
  });

  TransactionSearch.multipleValueField("ids");

  TransactionSearch.multipleValueField("user");

  TransactionSearch.multipleValueField("paymentInstrumentType");

  TransactionSearch.multipleValueField("merchantAccountId");

  TransactionSearch.multipleValueField("status", {
    "allows": Transaction.Status.All()
  });

  TransactionSearch.multipleValueField("source", {
    "allows": [Transaction.Source.Api, Transaction.Source.ControlPanel, Transaction.Source.Recurring]
  });

  TransactionSearch.multipleValueField("type", {
    "allows": Transaction.Type.All()
  });

  TransactionSearch.keyValueFields("refund");

  TransactionSearch.rangeFields("amount", "authorizationExpiredAt", "authorizedAt", "createdAt", "disbursementDate", "disputeDate", "failedAt", "gatewayRejectedAt", "processorDeclinedAt", "settledAt", "submittedForSettlementAt", "voidedAt");

  return TransactionSearch;

})(AdvancedSearch);

exports.TransactionSearch = TransactionSearch;
