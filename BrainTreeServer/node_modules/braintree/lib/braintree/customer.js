//@ sourceMappingURL=customer.map
// Generated by CoffeeScript 1.6.1
var AndroidPayCard, ApplePayCard, AttributeSetter, CoinbaseAccount, CreditCard, Customer, PayPalAccount,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AttributeSetter = require('./attribute_setter').AttributeSetter;

ApplePayCard = require('./apple_pay_card').ApplePayCard;

AndroidPayCard = require('./android_pay_card').AndroidPayCard;

CreditCard = require('./credit_card').CreditCard;

PayPalAccount = require('./paypal_account').PayPalAccount;

CoinbaseAccount = require('./coinbase_account').CoinbaseAccount;

Customer = (function(_super) {

  __extends(Customer, _super);

  function Customer(attributes) {
    var cardAttributes, coinbaseAccountAttributes, paymentMethod, paypalAccountAttributes, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4;
    Customer.__super__.constructor.call(this, attributes);
    this.paymentMethods = [];
    if (attributes.creditCards) {
      this.creditCards = (function() {
        var _i, _len, _ref, _results;
        _ref = attributes.creditCards;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cardAttributes = _ref[_i];
          _results.push(new CreditCard(cardAttributes));
        }
        return _results;
      })();
      _ref = this.creditCards;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        paymentMethod = _ref[_i];
        this.paymentMethods.push(paymentMethod);
      }
    }
    if (attributes.applePayCards) {
      this.applePayCards = (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = attributes.applePayCards;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          cardAttributes = _ref1[_j];
          _results.push(new ApplePayCard(cardAttributes));
        }
        return _results;
      })();
      _ref1 = this.applePayCards;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        paymentMethod = _ref1[_j];
        this.paymentMethods.push(paymentMethod);
      }
    }
    if (attributes.androidPayCards) {
      this.androidPayCards = (function() {
        var _k, _len2, _ref2, _results;
        _ref2 = attributes.androidPayCards;
        _results = [];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          cardAttributes = _ref2[_k];
          _results.push(new AndroidPayCard(cardAttributes));
        }
        return _results;
      })();
      _ref2 = this.androidPayCards;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        paymentMethod = _ref2[_k];
        this.paymentMethods.push(paymentMethod);
      }
    }
    if (attributes.paypalAccounts) {
      this.paypalAccounts = (function() {
        var _l, _len3, _ref3, _results;
        _ref3 = attributes.paypalAccounts;
        _results = [];
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          paypalAccountAttributes = _ref3[_l];
          _results.push(new PayPalAccount(paypalAccountAttributes));
        }
        return _results;
      })();
      _ref3 = this.paypalAccounts;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        paymentMethod = _ref3[_l];
        this.paymentMethods.push(paymentMethod);
      }
    }
    if (attributes.coinbaseAccounts) {
      this.coinbaseAccounts = (function() {
        var _len4, _m, _ref4, _results;
        _ref4 = attributes.coinbaseAccounts;
        _results = [];
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          coinbaseAccountAttributes = _ref4[_m];
          _results.push(new CoinbaseAccount(coinbaseAccountAttributes));
        }
        return _results;
      })();
      _ref4 = this.coinbaseAccounts;
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        paymentMethod = _ref4[_m];
        this.paymentMethods.push(paymentMethod);
      }
    }
  }

  return Customer;

})(AttributeSetter);

exports.Customer = Customer;
