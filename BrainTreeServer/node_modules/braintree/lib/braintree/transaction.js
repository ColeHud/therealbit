//@ sourceMappingURL=transaction.map
// Generated by CoffeeScript 1.6.1
var AndroidPayCard, ApplePayCard, AttributeSetter, CoinbaseAccount, CreditCard, DisbursementDetails, Dispute, PayPalAccount, RiskData, ThreeDSecureInfo, Transaction,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AttributeSetter = require('./attribute_setter').AttributeSetter;

ApplePayCard = require('./apple_pay_card').ApplePayCard;

AndroidPayCard = require('./android_pay_card').AndroidPayCard;

CreditCard = require('./credit_card').CreditCard;

PayPalAccount = require('./paypal_account').PayPalAccount;

CoinbaseAccount = require('./coinbase_account').CoinbaseAccount;

DisbursementDetails = require('./disbursement_details').DisbursementDetails;

Dispute = require('./dispute').Dispute;

RiskData = require('./risk_data').RiskData;

ThreeDSecureInfo = require('./three_d_secure_info').ThreeDSecureInfo;

Transaction = (function(_super) {

  __extends(Transaction, _super);

  Transaction.CreatedUsing = {
    FullInformation: 'full_information',
    Token: 'token'
  };

  Transaction.EscrowStatus = {
    HoldPending: 'hold_pending',
    Held: 'held',
    ReleasePending: 'release_pending',
    Released: 'released',
    Refunded: 'refunded'
  };

  Transaction.Source = {
    Api: 'api',
    ControlPanel: 'control_panel',
    Recurring: 'recurring'
  };

  Transaction.Type = {
    Credit: 'credit',
    Sale: 'sale',
    All: function() {
      var all, key, value;
      all = [];
      for (key in this) {
        value = this[key];
        if (key !== 'All') {
          all.push(value);
        }
      }
      return all;
    }
  };

  Transaction.GatewayRejectionReason = {
    ApplicationIncomplete: 'application_incomplete',
    Avs: 'avs',
    Cvv: 'cvv',
    AvsAndCvv: 'avs_and_cvv',
    Duplicate: 'duplicate',
    Fraud: 'fraud',
    ThreeDSecure: 'three_d_secure'
  };

  Transaction.IndustryData = {
    Lodging: 'lodging',
    TravelAndCruise: 'travel_cruise'
  };

  Transaction.Status = {
    AuthorizationExpired: 'authorization_expired',
    Authorizing: 'authorizing',
    Authorized: 'authorized',
    GatewayRejected: 'gateway_rejected',
    Failed: 'failed',
    ProcessorDeclined: 'processor_declined',
    Settled: 'settled',
    Settling: 'settling',
    SettlementDeclined: 'settlement_declined',
    SettlementPending: 'settlement_pending',
    SubmittedForSettlement: 'submitted_for_settlement',
    Voided: 'voided',
    All: function() {
      var all, key, value;
      all = [];
      for (key in this) {
        value = this[key];
        if (key !== 'All') {
          all.push(value);
        }
      }
      return all;
    }
  };

  function Transaction(attributes) {
    var disputeAttributes;
    Transaction.__super__.constructor.call(this, attributes);
    this.creditCard = new CreditCard(attributes.creditCard);
    this.paypalAccount = new PayPalAccount(attributes.paypal);
    this.coinbaseAccount = new CoinbaseAccount(attributes.coinbaseAccount);
    this.applePayCard = new ApplePayCard(attributes.applePay);
    this.androidPayCard = new AndroidPayCard(attributes.androidPayCard);
    this.disbursementDetails = new DisbursementDetails(attributes.disbursementDetails);
    if (attributes.disputes != null) {
      this.disputes = (function() {
        var _i, _len, _ref, _results;
        _ref = attributes.disputes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          disputeAttributes = _ref[_i];
          _results.push(new Dispute(disputeAttributes));
        }
        return _results;
      })();
    }
    if (attributes.riskData) {
      this.riskData = new RiskData(attributes.riskData);
    }
    if (attributes.threeDSecureInfo) {
      this.threeDSecureInfo = new ThreeDSecureInfo(attributes.threeDSecureInfo);
    }
  }

  Transaction.prototype.isDisbursed = function() {
    return this.disbursementDetails.isValid();
  };

  return Transaction;

})(AttributeSetter);

exports.Transaction = Transaction;
